# NOTE: update this with your service name
service: match-organiser-api

# Create an optimized package for our functions 
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

# Custom variables
custom:
  stage: ${opt:stage, self:provider.stage}
  tableName: ${self:custom.stage}-matches

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: us-southeast-2
  environment:
    tableName: ${self:custom.tableName}

  # Permissions
  # @Link: https://serverless.com/framework/docs/providers/aws/guide/functions#permissions
  # Every AWS Lambda function needs permission to interact with other AWS infrastructure resources
  # within your account. These permissions are set via an AWS IAM Role. You can set permission policy statements
  # within this role via the provider.iamRoleStatements property.
  iamRoleStatements: # permissions for all of your functions can be set here
    - Effect: Allow
      Action: # Gives permission to DynamoDB tables.
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Restrict our IAM role permissions to the specific table for the stage
      Resource:
        - "Fn::GetAtt": [ MatchesTable, Arn ]


functions:
  hello:
    handler: handler.hello
    events:
      - http:
          path: hello
          method: get

# All Resources are other AWS infrastructure resources which the AWS Lambda functions in your Serivce depend on,
# like AWS DynamoDB or AWS S3.
resources: # CloudFormation template syntax
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  # DynamoDB
  - ${file(resources/dynamodb-table.yml)}
  # Cognito
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}
